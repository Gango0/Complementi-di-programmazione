*************************TRACCIA*******************************
Scrivere una funzione ricorsiva:

TipoLista porzioneDiListe(TipoLista l1, TipoLista l2, int k);
la quale riceve due liste di interi l1 ed l2, entrambe di lunghezza maggiore o uguale a k.
La funzione deve ritornare una nuova lista che contiene nel seguente ordine:
i primi k elementi di l1 (nell'ordine in cui compaiono in l1)
gli ultimi k elementi di l2 (nell'ordine in cui compaiono in l2)

NB: Se k Ã¨ 0, ritornare una lista vuota.

Esempio 1
l1: [1, 4, 2, 3] 
l2: [5, 2, 4, 1]
k: 3
Output: [1, 4, 2, 2, 4, 1]

Infatti, i primi k=3 elementi di l1 sono [1,4,2] e gli ultimi k=3 elementi di l2 sono [2, 4, 1].

************************IMPLEMENTAZIONE************************
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "aux.h"

long int somma(TipoLista l){
  if(estVuota(l)) return 0;
  else return car(l)+somma(cdr(l));
}

TipoLista prima(TipoLista l1,int k){
  if(estVuota(l1)) return listaVuota();
  if(k>0) return cons(car(l1),prima(cdr(l1),k-1));
  else return prima(cdr(l1),k);
}

TipoLista ultima(TipoLista l2,int k){
  if(estVuota(l2)) return listaVuota();
  else if(length(l2)<=k) return cons(car(l2),ultima(cdr(l2),k));
  else return ultima(cdr(l2),k);
}

TipoLista append (TipoLista l,T e){
if(estVuota(l)) return cons(e,l);
return cons(car(l),append(cdr(l),e));
}

TipoLista concat (TipoLista l1,TipoLista l2){
if (estVuota(l2)) return l1;
return concat (append(l1,car(l2)),cdr(l2));
}

TipoLista porzioneDiListe(TipoLista l1, TipoLista l2, int k) {
  TipoLista prim=prima(l1,k);
  TipoLista ultim=ultima(l2,k);
  if(k==0 || (estVuota(l1) && estVuota(l2))) return listaVuota();
  return concat(prim,ultim);
}


TipoLista aux(TipoLista* liste1, TipoLista* liste2, int n, int k,int pos){
  if(pos==n) return listaVuota();
  if(k==0) return cons(0,aux(liste1+1,liste2+1,n,k,pos+1));
  return cons(somma(prima(liste1[pos],k))-somma(ultima(liste2[pos],k)),aux(liste1,liste2,n,k,pos+1));
  
}

TipoLista diffPorzioniDiListe(TipoLista* liste1, TipoLista* liste2, int n, int k) {
  if(n==0) return listaVuota();
  return aux(liste1,liste2,n,k,0);
}
