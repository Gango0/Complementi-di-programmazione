*************************TRACCIA*******************************
Scrivere una funzione ricorsiva:

TipoLista porzioneDiListe(TipoLista l1, TipoLista l2, int k);
la quale riceve due liste di interi l1 ed l2, entrambe di lunghezza maggiore o uguale a k.
La funzione deve ritornare una nuova lista che contiene nel seguente ordine:
i primi k elementi di l1 (nell'ordine in cui compaiono in l1)
gli ultimi k elementi di l2 (nell'ordine in cui compaiono in l2)

NB: Se k è 0, ritornare una lista vuota.

Esempio 1
l1: [1, 4, 2, 3] 
l2: [5, 2, 4, 1]
k: 3
Output: [1, 4, 2, 2, 4, 1]

Infatti, i primi k=3 elementi di l1 sono [1,4,2] e gli ultimi k=3 elementi di l2 sono [2, 4, 1].

************************IMPLEMENTAZIONE************************
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "aux.h"

TipoLista inserisciLista(TipoLista l1, TipoLista l2, int k) {
  if(estVuota(l1) && estVuota(l2)) return listaVuota();
  if(estVuota(l1)) return cons(car(l2),inserisciLista(l1,cdr(l2),k));
  if(k>0) return cons(car(l1),inserisciLista(cdr(l1),l2,k-1));
  if(k==0 && !estVuota(l2)) return cons(car(l2),inserisciLista(l1,cdr(l2),k));
  return cons(car(l1),inserisciLista(cdr(l1),l2,k));
}

*************************TRACCIA*****************************
Scrivere una funzione:
TipoLista argmaxListeInserite(TipoLista* liste1, TipoLista* liste2, int n, int k);
la quale riceve due array liste1 e liste2, ognuno contenente n liste di interi non negativi, e un intero k.
La funzione deve ritornare una nuova lista di lunghezza n, tale che l'elemento all'indice i sia:
1, se il massimo valore tra gli elementi di liste1[i] è uguale al massimo valore della lista ottenuta come inserisciLista(liste1[i], liste2[i], k);
0 altrimenti.
NB:
 -si assuma che tutte le liste in liste1 abbiano lunghezza maggiore o uguale a k
 -se n=0, la funzione deve restituire una lista vuota
 -se una lista in liste1 è vuota, si consideri 0 come suo valore massimo.
ESEMPIO:

liste1: [
  [6, 7, 1, 4, 8, 8, 2],
  [8, 8, 8],
  [9, 9, 2]
]
liste2: [ 
  [8, 9, 5, 1, 9, 2, 4],
  [8, 5, 5, 1, 3, 8, 7, 2],
  [7, 5, 3]
]
k: 1
Output: [
  0, (infatti, il massimo di liste1[0] è 8, mentre il massimo di inserisciLista(liste1[0], liste2[0], 1) è 9 )
  1, (infatti, il massimo di liste1[1] è 8, uguale al massimo di inserisciLista(liste1[1], liste2[1], 1) )
  1  (infatti, il massimo di liste1[2] è 9, uguale al massimo di inserisciLista(liste1[2], liste2[2], 1) )
]

*************************IMPLEMENTAZIONE*************************
//QUESTA FUNZIONE CALCOLA IL MASSIMO DI UNA QUALSIASI LISTA

int max(TipoLista l,int maxi){
  if(estVuota(l)) return maxi;
  if(car(l)>maxi) maxi=car(l);
  return max(cdr(l),maxi);  
}

TipoLista aux(TipoLista* liste1, TipoLista* liste2, int n, int k,int pos){
  if(pos==n) return listaVuota();
  if(pos<n){
    if(max(liste1[pos],-100)==max(inserisciLista(liste1[pos],liste2[pos],k),-100)) return cons(1,aux(liste1,liste2,n,k,pos+1));
    else return cons(0,aux(liste1,liste2,n,k,pos+1));                    
  }
  return aux(liste1,liste2,n,k,pos+1);
}

//FUNZIONE PRINCIPALE
TipoLista argmaxListeInserite(TipoLista* liste1, TipoLista* liste2, int n, int k){
  return aux(liste1,liste2,n,k,0);
}
