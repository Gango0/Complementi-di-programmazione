****************************REGOLE***************************
1) In entrambi gli esercizi è consentito accedere ai campi della struttura (next, info). Si può anche utilizzare l’interfaccia di lista fornita in aux.h.
2) È possibile definire funzioni ausiliarie. Negli esercizi in cui è richiesta una soluzione ricorsiva, tutte le funzioni ausiliarie usate devono essere ricorsive.
3) Funzioni che non processano direttamente i dati, ovvero quelle O(1), ovviamente non saranno ricorsive (né iterative).
4) Non è consentito usare variabili globali (comprese zone di memoria allocate dinamicamente) e altre strutture dati (es. array) non esplicitamente indicati nel testo dell’esercizio.

*************************TRACCIA****************************
Esercizio 2.1
Scrivere una funzione ricorsiva:
TipoLista inserisciLista(TipoLista l1, TipoLista l2, int k);
la quale riceve due liste di interi l1 ed l2 e un intero k minore o uguale alla lunghezza di l1. 
La funzione deve ritornare una nuova lista che contiene nel seguente ordine:
- i primi k elementi di l1 (nell'ordine in cui compaiono in l1)
- tutti gli elementi di l2 (nell'ordine in cui compaiono in l2)
- gli elementi rimanenti di l1 dopo i primi k (nell'ordine in cui compaiono in l1)
NB: se la lista l1 è una lista vuota, dalla definizione sopra si ha che va ritornata una copia di l2.

ESEMPIO:

l1: [1, 4, 2, 3] 
l2: [5, 2, 4, 1] 
k: 3
Output: [1, 4, 2,  5, 2, 4, 1,  3]
Infatti, i primi k=3 elementi di l1 sono [1,4,2] e i rimanenti sono [3].

*******************************IMPLEMENTAZIONE*******************************
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "aux.h"

TipoLista inserisciLista(TipoLista l1, TipoLista l2, int k) {
  if(estVuota(l1) && estVuota(l2)) return listaVuota();
  if(estVuota(l1)) return cons(car(l2),inserisciLista(l1,cdr(l2),k));
  if(k>0 || estVuota(l2)) return cons(car(l1),inserisciLista(cdr(l1),l2,k-1));
  if(k==0) return cons(car(l2),inserisciLista(l1,cdr(l2),k));
  if(estVuota(l2) && k==0) return cons(car(l1),inserisciLista(cdr(l1),l2,k));
  return NULL;
}
*************************TRACCIA*****************************
Esercizio 2.2
Scrivere una funzione:
TipoLista argmaxListeInserite(TipoLista* liste1, TipoLista* liste2, int n, int k);
la quale riceve due array liste1 e liste2, ognuno contenente n liste di interi non negativi, e un intero k. 
La funzione deve ritornare una nuova lista di lunghezza n, tale che l'elemento all'indice i sia:
- 1, se il massimo valore tra gli elementi di liste1[i] è uguale al massimo valore della lista ottenuta come inserisciLista(liste1[i], liste2[i], k);
- 0 altrimenti.
NB:
 -si assuma che tutte le liste in liste1 abbiano lunghezza maggiore o uguale a k
 -se n=0, la funzione deve restituire una lista vuota
 -se una lista in liste1 è vuota, si consideri 0 come suo valore massimo.

ESEMPIO:
liste1: [
  [6, 7, 1, 4, 8, 8, 2],
  [8, 8, 8],
  [9, 9, 2]
]
liste2: [ 
  [8, 9, 5, 1, 9, 2, 4],
  [8, 5, 5, 1, 3, 8, 7, 2],
  [7, 5, 3]
]
k: 1
Output: [
  0, (infatti, il massimo di liste1[0] è 8, mentre il massimo di inserisciLista(liste1[0], liste2[0], 1) è 9 )
  1, (infatti, il massimo di liste1[1] è 8, uguale al massimo di inserisciLista(liste1[1], liste2[1], 1) )
  1  (infatti, il massimo di liste1[2] è 9, uguale al massimo di inserisciLista(liste1[2], liste2[2], 1) )
]

*********************************IMPLEMENTAZIONE***********************************

//questa funzione calcola il massimo di una lista
int maxi(TipoLista l,int max){
  if(estVuota(l)) return max;
  if(car(l)>max) max=car(l);
  return maxi(cdr(l),max);
}

TipoLista aux(TipoLista* liste1, TipoLista* liste2, int n, int k,int pos){
  if(n==0) return listaVuota();
  if(maxi(liste1[pos],0)==maxi(inserisciLista(liste1[pos],liste2[pos],k),0)) return cons(1,aux(liste1,liste2,n-1,k,pos+1));
  else return cons(0,aux(liste1,liste2,n-1,k,pos+1));
  }

TipoLista argmaxListeInserite(TipoLista* liste1, TipoLista* liste2, int n, int k){
  if(n==0) return NULL;
  return aux(liste1,liste2,n,k,0);
  }
